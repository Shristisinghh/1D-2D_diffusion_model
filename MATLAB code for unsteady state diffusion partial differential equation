clear all
close all
clc
%% Defining the mesh
n_points = 51;
dom_size = 1;
h = dom_size / (n_points - 1);
dt = 0.0001;
Di=2.6*10^(-5);
Dv=1.2*10^(-14);
Ci=6.1*10^9;
Cv=10^16;
Chg=1.03*10^22;
alpha = (Di*dt) / (h * h);
Temp=150;
%% constant
Kr=(4*3.14*(Di+Dv)*(1.6*10^(-19))^2)/(1.38*10^(-23)*16.363*Temp);
g=(Kr*Ci*Cv)/(Chg);
con= (g*Chg)-(Kr*Ci*Cv);
%% Initializing the problem
y = zeros(n_points, n_points);
y(1, :) = 1;
y_new = zeros(n_points, n_points);
y_new(1, :) = 1;
error_mag = 1;
error_req = 1e-9;
iterations = 0;
%% Tracking the error magnitude
error_track = zeros(1, 1);
%% Calculation
while error_mag > error_req
for i = 2:(n_points - 1)
for j = 2:(n_points - 1)
y_new(i, j) = y(i, j) + alpha * (y(i - 1, j) + y(i + 1, j) +
y(i, j - 1) + y(i, j + 1) - 4 * y(i, j)) + con;
end
end
iterations = iterations + 1;
% Calculation of error magnitude
error_mag = 0;
for i = 2:(n_points - 1)
for j = 2:(n_points - 1)
error_mag = error_mag + abs(y(i, j) - y_new(i, j));
end
end
error_track(iterations) = error_mag;

if rem(iterations, 1000) == 0
fprintf('Iterations: %d, Error: %f\n', iterations, error_mag);
end
% Assigning new values to be old
y = y_new;
end
%% Plotting
x_dom = ((1:n_points) - 1) * h;
y_dom = 1 - ((1:n_points) - 1) * h;
[X, Y] = meshgrid(x_dom, y_dom);
figure;
subplot(2, 1, 1);
contourf(X, Y, y, 12);
colorbar;
title('Concentration Distribution');
xlabel('x(micron)')
ylabel('y(micron)')

subplot(2, 1, 2);
time = dt * (1:iterations);
plot(time, error_track);
xlabel('Time');
ylabel('Error');
title('Error Magnitude over Time');
% figure(2);
% surf(X, Y, y)
